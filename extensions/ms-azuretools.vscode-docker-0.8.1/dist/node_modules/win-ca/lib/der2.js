// Generated by CoffeeScript 1.12.7

/*
Convert DER-encoded certificate to something...
 */
var asn1, convert, der, der2, forge, formats, k, myASN, pem, pki, self, v;

forge = require('node-forge');

asn1 = forge.asn1;

pki = forge.pki;

self = require('../package');

module.exports = der2 = function(format, der) {
  return (formats[format] || formats[formats.length - 1])(der);
};

convert = {
  der: der = function(der) {
    return der;
  }
};

convert.pem = pem = function(der) {
  var lines;
  lines = ['-----BEGIN CERTIFICATE-----'];
  der = der.toString('base64');
  while (der.length) {
    lines.push(der.substr(0, 64));
    der = der.substr(64);
  }
  lines.push('-----END CERTIFICATE-----', '');
  return lines.join("\r\n");
};

convert.txt = function(der) {
  var crt, d;
  crt = myASN(der);
  d = new Date;
  return "Subject\t" + (crt.subject.value.map(function(rdn) {
    return rdn.value[0].value[1].value;
  }).join('/')) + "\nValid\t" + (crt.valid.value.map(function(date) {
    return date.value;
  }).join(' - ')) + "\nSaved\t" + (d.toLocaleDateString()) + " " + (d.toTimeString().replace(/\s*\(.*\)\s*/, '')) + " by " + self.name + "@" + self.version + "\n" + (pem(der));
};

convert.asn1 = myASN = function(der) {
  var crt, hasSerial, serial;
  crt = asn1.fromDer(der.toString('binary')).value[0].value;
  serial = crt[0];
  hasSerial = serial.tagClass === asn1.Class.CONTEXT_SPECIFIC && serial.type === 0 && serial.constructed;
  crt = crt.slice(hasSerial);
  return {
    serial: crt[0],
    issuer: crt[2],
    valid: crt[3],
    subject: crt[4]
  };
};

convert.forge = function(der) {
  return pki.certificateFromAsn1(asn1.fromDer(der.toString('binary')));
};

formats = [];

for (k in convert) {
  v = convert[k];
  der2[k] = formats.length;
  formats.push(v);
}

der2[k] = der();
