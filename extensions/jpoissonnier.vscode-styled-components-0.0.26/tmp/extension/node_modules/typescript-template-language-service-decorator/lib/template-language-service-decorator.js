"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
// Original code forked from https://github.com/Quramy/ts-graphql-plugin
Object.defineProperty(exports, "__esModule", { value: true });
var TemplateLanguageServiceProxy = /** @class */ (function () {
    function TemplateLanguageServiceProxy(typescript, sourceHelper, templateStringService, logger) {
        this.typescript = typescript;
        this.sourceHelper = sourceHelper;
        this.templateStringService = templateStringService;
        this.logger = logger;
        this._wrappers = [];
        this.tryAdaptGetCompletionsAtPosition();
        this.tryAdaptGetCompletionEntryDetails();
        this.tryAdaptGetQuickInfoAtPosition();
        this.tryAdaptGetSemanticDiagnostics();
        this.tryAdaptGetSyntaxDiagnostics();
        this.tryAdaptGetFormattingEditsForRange();
        this.tryAdaptGetCodeFixesAtPosition();
        this.tryAdaptGetSupportedCodeFixes();
    }
    TemplateLanguageServiceProxy.prototype.decorate = function (languageService) {
        var ret = languageService;
        this._wrappers.forEach(function (_a) {
            var name = _a.name, wrapper = _a.wrapper;
            ret[name] = wrapper(languageService[name]);
        });
        return ret;
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetSyntaxDiagnostics = function () {
        var _this = this;
        if (!this.templateStringService.getSyntacticDiagnostics) {
            return;
        }
        var call = this.templateStringService.getSyntacticDiagnostics.bind(this.templateStringService);
        this.wrap('getSyntacticDiagnostics', function (delegate) { return function (fileName) {
            return _this.adaptDiagnosticsCall(delegate, call, fileName);
        }; });
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetSemanticDiagnostics = function () {
        var _this = this;
        if (!this.templateStringService.getSemanticDiagnostics) {
            return;
        }
        var call = this.templateStringService.getSemanticDiagnostics.bind(this.templateStringService);
        this.wrap('getSemanticDiagnostics', function (delegate) { return function (fileName) {
            return _this.adaptDiagnosticsCall(delegate, call, fileName);
        }; });
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetQuickInfoAtPosition = function () {
        var _this = this;
        if (!this.templateStringService.getQuickInfoAtPosition) {
            return;
        }
        this.wrap('getQuickInfoAtPosition', function (delegate) { return function (fileName, position) {
            var context = _this.sourceHelper.getTemplate(fileName, position);
            if (!context) {
                return delegate(fileName, position);
            }
            var quickInfo = _this.templateStringService.getQuickInfoAtPosition(context, _this.sourceHelper.getRelativePosition(context, position));
            if (quickInfo) {
                return Object.assign({}, quickInfo, {
                    textSpan: {
                        start: quickInfo.textSpan.start + context.node.getStart() + 1,
                        length: quickInfo.textSpan.length,
                    },
                });
            }
            return delegate(fileName, position);
        }; });
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetCompletionsAtPosition = function () {
        var _this = this;
        if (!this.templateStringService.getCompletionsAtPosition) {
            return;
        }
        this.wrap('getCompletionsAtPosition', function (delegate) { return function (fileName, position) {
            var rest = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                rest[_i - 2] = arguments[_i];
            }
            var context = _this.sourceHelper.getTemplate(fileName, position);
            if (!context) {
                return delegate.apply(void 0, [fileName, position].concat(rest));
            }
            return _this.templateStringService.getCompletionsAtPosition(context, _this.sourceHelper.getRelativePosition(context, position));
        }; });
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetCompletionEntryDetails = function () {
        var _this = this;
        if (!this.templateStringService.getCompletionEntryDetails) {
            return;
        }
        this.wrap('getCompletionEntryDetails', function (delegate) { return function (fileName, position, name) {
            var rest = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                rest[_i - 3] = arguments[_i];
            }
            var context = _this.sourceHelper.getTemplate(fileName, position);
            if (!context) {
                return delegate.apply(void 0, [fileName, position, name].concat(rest));
            }
            return _this.templateStringService.getCompletionEntryDetails(context, _this.sourceHelper.getRelativePosition(context, position), name);
        }; });
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetFormattingEditsForRange = function () {
        var _this = this;
        if (!this.templateStringService.getFormattingEditsForRange) {
            return;
        }
        this.wrap('getFormattingEditsForRange', function (delegate) { return function (fileName, start, end, options) {
            var templateEdits = [];
            for (var _i = 0, _a = _this.sourceHelper.getAllTemplates(fileName); _i < _a.length; _i++) {
                var template = _a[_i];
                var nodeStart = template.node.getStart() + 1;
                var nodeEnd = template.node.getEnd() - 1;
                if (end < nodeStart || start > nodeEnd) {
                    continue;
                }
                var templateStart = Math.max(0, start - nodeStart);
                var templateEnd = Math.min(nodeEnd - nodeStart, end - nodeStart);
                for (var _b = 0, _c = _this.templateStringService.getFormattingEditsForRange(template, templateStart, templateEnd, options); _b < _c.length; _b++) {
                    var change = _c[_b];
                    templateEdits.push(_this.translateTextChange(template, change));
                }
            }
            return delegate(fileName, start, end, options).concat(templateEdits);
        }; });
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetCodeFixesAtPosition = function () {
        var _this = this;
        if (!this.templateStringService.getCodeFixesAtPosition) {
            return;
        }
        this.wrap('getCodeFixesAtPosition', function (delegate) { return function (fileName, start, end, errorCodes, options) {
            var templateActions = [];
            for (var _i = 0, _a = _this.sourceHelper.getAllTemplates(fileName); _i < _a.length; _i++) {
                var template = _a[_i];
                var nodeStart = template.node.getStart() + 1;
                var nodeEnd = template.node.getEnd() - 1;
                if (end < nodeStart || start > nodeEnd) {
                    continue;
                }
                var templateStart = Math.max(0, start - nodeStart);
                var templateEnd = Math.min(nodeEnd - nodeStart, end - nodeStart);
                for (var _b = 0, _c = _this.templateStringService.getCodeFixesAtPosition(template, templateStart, templateEnd, errorCodes, options); _b < _c.length; _b++) {
                    var codeAction = _c[_b];
                    templateActions.push(_this.translateCodeAction(template, codeAction));
                }
            }
            return delegate(fileName, start, end, errorCodes, options).concat(templateActions);
        }; });
    };
    TemplateLanguageServiceProxy.prototype.tryAdaptGetSupportedCodeFixes = function () {
        var _this = this;
        if (!this.templateStringService.getSupportedCodeFixes) {
            return;
        }
        var delegate = this.typescript.getSupportedCodeFixes.bind(this.typescript);
        this.typescript.getSupportedCodeFixes = function () {
            return delegate().concat(_this.templateStringService.getSupportedCodeFixes());
        };
    };
    TemplateLanguageServiceProxy.prototype.wrap = function (name, wrapper) {
        this._wrappers.push({ name: name, wrapper: wrapper });
        return this;
    };
    TemplateLanguageServiceProxy.prototype.adaptDiagnosticsCall = function (delegate, implementation, fileName) {
        var baseDiagnostics = delegate(fileName);
        var templateDiagnostics = [];
        for (var _i = 0, _a = this.sourceHelper.getAllTemplates(fileName); _i < _a.length; _i++) {
            var context = _a[_i];
            var diagnostics = implementation(context);
            for (var _b = 0, diagnostics_1 = diagnostics; _b < diagnostics_1.length; _b++) {
                var diagnostic = diagnostics_1[_b];
                templateDiagnostics.push(Object.assign({}, diagnostic, {
                    start: context.node.getStart() + 1 + (diagnostic.start || 0),
                }));
            }
        }
        return baseDiagnostics.concat(templateDiagnostics);
    };
    TemplateLanguageServiceProxy.prototype.translateTextChange = function (context, textChangeInTemplate) {
        textChangeInTemplate.span.start += context.node.getStart() + 1;
        return textChangeInTemplate;
    };
    TemplateLanguageServiceProxy.prototype.translateFileTextChange = function (context, changes) {
        var _this = this;
        return {
            fileName: changes.fileName,
            textChanges: changes.textChanges.map(function (textChange) { return _this.translateTextChange(context, textChange); }),
        };
    };
    TemplateLanguageServiceProxy.prototype.translateCodeAction = function (context, action) {
        var _this = this;
        return {
            description: action.description,
            changes: action.changes.map(function (change) { return _this.translateFileTextChange(context, change); }),
        };
    };
    return TemplateLanguageServiceProxy;
}());
exports.default = TemplateLanguageServiceProxy;
